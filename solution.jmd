---
title: "BEE 4750/5750 Homework 3"
author: "Nimra Shakoor (ns924)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
    term: true
    results: tex
    cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

<!--- this block is hidden, but stores the generator and demand data; you can use a dataframe to combine these or refactor as you'd like -->
```julia; echo = false; results = "hidden"
# generator data
investment_cost = [457000, 268000, 85000, 62580, 92000, 92000]
op_cost = [0, 22, 35, 45, 0, 0]
co2_emissions = [0, 1, 0.43, 0.55, 0, 0]
thermal_cf = [0.95, 1, 1, 1]

hours = 1:24
demand = [1517, 1486, 1544, 1733, 2058, 2470, 2628, 2696, 2653, 2591, 2626, 2714, 2803, 2842, 2891,  2821, 3017, 3074, 2957,  2487, 2249, 1933, 1684, 1563]
wind_cf = [0.58, 0.57, 0.55, 0.28, 0.14, 0.21, 0.03, 0.04, 0.01, 0.04, 0.04, 0.01, 0.04, 0.04, 0.01, 0.01, 0.01, 0.13, 0.30, 0.45, 0.44, 0.57, 0.55, 0.58]
solar_cf = [0, 0, 0, 0, 0, 0, 0.20, 0.57, 0.80, 0.93, 0.99, 0.99, 0.85, 0.99, 0.95, 0.81, 0.55, 0.12, 0, 0, 0, 0, 0, 0]
```

# Problem 1

## Problem 1.1
Let $x_p$ be the capacity (MW) of plant type $p$.

Let $y_{p,t}$ be the production (MW) from plant type $p$ in period $t$.

Let $d_t$ be the demand (MW) not served in period $t$.

## Problem 1.2
min Z = investment cost + operating cost + demand penalty

Let $C_p^{INV}$ be the investment cost for plant $p$.

Let $C_p^{OP}$ be the operating cost for plant $p$.

Let $L_t$ be the length of time period $t$.

Let the cost of non-served demand be \$1000/MWh.

```math
min(Z) = \sum_{p} C_p^{INV} x_p + 365 \sum_{p} \sum_{t} L_t C_p^{OP} y_{p,t} + 365 \sum_{t} 1000 L_t d_t
```

## Problem 1.3
Plants cannot produce more than their installed capacity and availability:
```math
y_{p,t} ≤ cf_{p,t} * x_p \quad \forall \; p \in P, t \in T
```

Demand not served is the difference between demand for each hour and the sum of the production of all plants at that hour:
```math
d_t = demand_t - \sum_p y_{p,t} \quad \forall \; t \in T
```

None of the values can be negative.
```math
x_p ≥ 0 \quad
y_{p,t} ≥ 0 \quad
d_t ≥ 0
```

This set of constraints is complete because it gives all variables a minimum and a maximum where relevant, 
and defines their relationships to one another.

## Problem 1.4
```julia
using JuMP
using HiGHS

plantcap = Model(HiGHS.Optimizer);
plants = ["geothermal", "coal", "CCGT", "CT", "wind", "solar"];
periods = ones(24);
P = 1:length(plants);
T = 1:length(periods);

@variable(plantcap, x[P] >= 0);
@variable(plantcap, y[P, T] >= 0);
@variable(plantcap, d[T] >= 0);

@objective(plantcap, Min, (investment_cost' * x) + 
    (sum((op_cost' .* periods * 365)' .* y)) +
    (1000 * periods' * 365 * d));

avail = ones(6, 24);
avail[1:4, :] .= thermal_cf;
avail[5, :] .= wind_cf;
avail[6, :] .= solar_cf;

@constraint(plantcap, availability[p in P, t in T], y[p, t] <= avail[p, t] * x[p]);
@constraint(plantcap, deficiency[t in T], d[t] == demand[t] - sum(y[p, t] for p in P));

optimize!(plantcap);
```

## Problem 1.5
```julia; echo = false; results = "hidden"
function x_solution()
    x_solutions = string.(trunc.(Int, value.(x))) .* " MW"
    for n in 1:length(plants)
        if n == length(plants)
            print("and " * string(x_solutions[n]) * " of " * plants[n])
        else
            print(string(x_solutions[n]) * " of " * plants[n] * ", ")
        end
    end
end
```

The utility should build about `j x_solution()` plants.

The total cost will be about 912 million dollars.

About `j trunc(Int, sum(value.(d)))` MW of energy will be non-served.

## Problem 1.6
```julia
using Plots

plot((value.(y).data)', title="Electricity Generated", 
    xlabel="Hour", ylabel="Electricity Generated (MW)", 
    label=permutedims(plants), legend=:outertopright)

areaplot((value.(y).data)', title="Electricity Generated", 
    xlabel="Hour", ylabel="Electricity Generated (MW)", 
    label=permutedims(plants), legend=:outertopright);
scatter!(demand, label="demand")
```

As shown on the plots, in the optimal solution solar plants generate the most energy and make the most contribution towards total demand, 
whereas geothermal and coal plants generate and contribute the least. All of the solar energy is produced roughly between hours 5 through 20, and
in the remaining hours, wind energy contributes more towards the total demand than it does at other times which makes sense since solar energy is not available then. 
Additionally, we can see that total demand is always met.

# Problem 2

## Problem 2.1
We need to add another constraint to limit the yearly total CO$_2$ emissions to 1.5 MtCO$_2$.

```math
365 \sum_p (CO_2 \; emissions_p  \sum_t y_{p,t}) ≤ 1.5*10^6
```

## Problem 2.2
```julia
plantcap = Model(HiGHS.Optimizer);
plants = ["geothermal", "coal", "CCGT", "CT", "wind", "solar"];
periods = ones(24);
P = 1:length(plants);
T = 1:length(periods);

@variable(plantcap, x[P] >= 0);
@variable(plantcap, y[P, T] >= 0);
@variable(plantcap, d[T] >= 0);

@objective(plantcap, Min, (investment_cost' * x) + 
    (sum((op_cost' .* periods * 365)' .* y)) +
    (1000 * periods' * 365 * d));

avail = ones(6, 24);
avail[1:4, :] .= thermal_cf;
avail[5, :] .= wind_cf;
avail[6, :] .= solar_cf;

@constraint(plantcap, availability[p in P, t in T], y[p, t] <= avail[p, t] * x[p]);
@constraint(plantcap, deficiency[t in T], d[t] == demand[t] - sum(y[p, t] for p in P));
@constraint(plantcap, emissions, 365*sum(co2_emissions .* (sum(y[p,t] for t in T) for p in P)) <= 1.5*10^6);

optimize!(plantcap);
```

## Problem 2.3
The utility should build about `j x_solution()` plants.

The total cost will be about 1066 million dollars.

About `j trunc(Int, sum(value.(d)))` MW of energy will be non-served.

Compared to the plan without the CO$_2$ limit, which did not include any geothermal energy, this plan costs more and does include geothermal energy,
which makes sense because geothermal plants do not have any associated CO$_2$ emissions. 

## Problem 2.4
```julia
plot((value.(y).data)', title="Electricity Generated", 
    xlabel="Hour", ylabel="Electricity Generated (MW)", 
    label=permutedims(plants), legend=:outertopright)

areaplot((value.(y).data)', title="Electricity Generated", 
    xlabel="Hour", ylabel="Electricity Generated (MW)", 
    label=permutedims(plants), legend=:outertopright);
scatter!(demand, label="demand")
```

Compared to the plan without the CO$_2$ limit, this plan has a higher geothermal contribution overall. Also,
around hour 5, there is no CT contribution since geothermal energy makes up its previous contribution of the demand, but around hour 20, 
both CT and geothermal energy are produced to meet the higher total demand. In both cases, however, total demand is always met.

## Problem 2.5
```julia
trunc(Int, 1000*shadow_price.(emissions))
```

If the utility was allowed to emit an additional 1000 tCO$_2$/yr, they would earn around an additional 130 thousand dollars.

# References
I had help from Audrey.